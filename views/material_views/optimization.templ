package material_views

import (
	"fmt"
	"github.com/kaloszer/insulationCalcHtmx/models"
	"github.com/kaloszer/insulationCalcHtmx/views"
)

templ InsulationCalculatorPage(materials []models.Material) {
	@views.Layout("Insulation Calculator", true, nil, "username") {
		<div class="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-xl">
			<h1 class="text-2xl font-bold mb-6">Insulation Calculator</h1>
			
			@InsulationCalculator(materials)
		</div>
	}
}

templ WallVisualization(result models.InsulationResult) {
    @layerVisualization(result.Layers)
    @uValueScale(result.TotalUValue)
}

templ layerVisualization(layers []models.InsulationLayer) {
    <div class="relative h-64 w-full border border-gray-300">
        for i, layer := range layers {
            @templ.Raw(generateLayerDiv(layer, i, layers))
        }
    </div>
}

templ uValueScale(totalUValue float64) {
    <div class="relative h-8 w-full mt-4 bg-gray-200">
        for _, uValue := range []float64{0.1, 0.15, 0.2, 0.4} {
            @templ.Raw(generateUValueMarker(uValue))
        }
        @templ.Raw(generateTotalUValueMarker(totalUValue))
    </div>
}


templ InsulationCalculator(materials []models.Material) {
    <form hx-post="/material/calculate-insulation" hx-target="#result" class="space-y-6">
        <div>
            <label for="base-wall" class="block text-sm font-medium text-gray-700">Base Wall</label>
            <select id="base-wall" name="wall-type" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                for _, material := range materials {
                    if material.Type == "wall" {
                        <option value={ fmt.Sprint(material.ID) }>{ material.Name }</option>
                    }
                }
            </select>
        </div>
        
        <div>
            <label for="insulation-materials" class="block text-sm font-medium text-gray-700">Insulation Materials (up to 3)</label>
            <select id="insulation-materials" name="insulation-materials" multiple class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                for _, material := range materials {
                    if material.Type == "insulation" {
                        <option value={ fmt.Sprint(material.ID) }>{ material.Name }</option>
                    }
                }
            </select>
        </div>
        
        <div>
            <label for="desired-u-value" class="block text-sm font-medium text-gray-700">Desired U-Value (W/m²K)</label>
            <input type="number" id="desired-u-value" name="desired-u-value" value="0.2" step="0.01" min="0.1" max="0.4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
        </div>
        
        <button type="submit" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">
            Calculate Optimal Insulation
        </button>
    </form>
    
    <div id="result" class="mt-8">
        <!-- Results will be loaded here via HTMX -->
    </div>
}

templ InsulationResult(result models.InsulationResult) {
    <div class="bg-gray-100 p-6 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">Optimal Insulation Configuration</h2>
        <div class="space-y-4">
            <div>
                <h3 class="text-lg font-medium mb-2">Wall Visualization</h3>
                @WallVisualization(result)
            </div>
            <div>
                <h3 class="text-lg font-medium mb-2">Insulation Details</h3>
                <ul class="space-y-2">
                    for _, layer := range result.Layers {
                        <li class="flex justify-between">
                            <span>{ layer.Material.Name }</span>
                            <span>{ fmt.Sprintf("%.2f mm", layer.Thickness) }</span>
                            <span>{ fmt.Sprintf("U-value: %.4f W/m²K", 1/(layer.Thickness/1000/layer.Material.Lambda)) }</span>
                        </li>
                    }
                </ul>
                <p class="mt-4 font-semibold">Total U-value: { fmt.Sprintf("%.4f W/m²K", result.TotalUValue) }</p>
                <p>Total Cost: { fmt.Sprintf("$%.2f", result.TotalCost) }</p>
            </div>
        </div>
    </div>
}

func getColorForLayer(index int) string {
    colors := []string{"#FF0000", "#00FF00", "#0000FF", "#FFFF00"}
    return colors[index%len(colors)]
}

func getOffsetForLayer(index int, layers []models.InsulationLayer) float64 {
    offset := 0.0
    for i := 0; i < index; i++ {
        offset += layers[i].Thickness
    }
    return offset / getTotalThickness(layers) * 100
}

func getTotalThickness(layers []models.InsulationLayer) float64 {
    total := 0.0
    for _, layer := range layers {
        total += layer.Thickness
    }
    return total
}

func generateLayerDiv(layer models.InsulationLayer, index int, layers []models.InsulationLayer) string {
    return fmt.Sprintf(`
        <div
            class="absolute bottom-0 left-0 h-full"
            style="width: %.2f%%; background-color: %s; left: %.2f%%"
        >
            <span class="absolute top-0 left-0 p-1 text-xs text-white">%s</span>
            <span class="absolute bottom-0 left-0 p-1 text-xs text-white">%.2f mm</span>
        </div>
    `, 
    layer.Thickness/getTotalThickness(layers)*100, 
    getColorForLayer(index), 
    getOffsetForLayer(index, layers),
    layer.Material.Name,
    layer.Thickness)
}

func generateUValueMarker(uValue float64) string {
    return fmt.Sprintf(`
        <div
            class="absolute top-0 h-full border-l border-gray-400"
            style="left: %.2f%%"
        >
            <span class="absolute bottom-full mb-1 text-xs transform -translate-x-1/2">%.2f</span>
        </div>
    `,
    (uValue-0.1)/(0.4-0.1)*100,
    uValue)
}

func generateTotalUValueMarker(totalUValue float64) string {
    return fmt.Sprintf(`
        <div
            class="absolute top-0 h-full w-1 bg-red-500"
            style="left: %.2f%%"
        ></div>
    `,
    (totalUValue-0.1)/(0.4-0.1)*100)
}