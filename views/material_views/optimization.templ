package material_views

import (
	"fmt"
	"github.com/kaloszer/insulationCalcHtmx/models"
	"github.com/kaloszer/insulationCalcHtmx/views"
)

templ InsulationCalculatorPage(materials []models.Material) {
	@views.Layout("Insulation Calculator", true, nil, "username") {
		<div class="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-xl">
			<h1 class="text-2xl font-bold mb-6">Insulation Calculator</h1>
			
			@InsulationCalculator(materials)
		</div>
	}
}

templ InsulationCalculator(materials []models.Material) {
	<form hx-post="/material/calculate-insulation" hx-target="#result" class="space-y-6">
		<div>
			<label for="wall-type" class="block text-sm font-medium text-gray-700">Wall Type</label>
			<select id="wall-type" name="wall-type" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
				<option value="solid">Solid</option>
				<option value="hollow">Hollow (stud walls)</option>
				<option value="sandwich">Sandwich</option>
			</select>
		</div>
		
		<div id="solid-inputs" class="space-y-4">
			<div>
				<label for="solid-lambda" class="block text-sm font-medium text-gray-700">Lambda (W/mK)</label>
				<input type="number" id="solid-lambda" name="solid-lambda" step="0.001" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
			</div>
			<div>
				<label for="solid-thickness" class="block text-sm font-medium text-gray-700">Thickness (mm)</label>
				<input type="number" id="solid-thickness" name="solid-thickness" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
			</div>
		</div>
		
		<div>
			<label for="insulation-materials" class="block text-sm font-medium text-gray-700">Insulation Materials</label>
			<select id="insulation-materials" name="insulation-materials" multiple class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
				for _, material := range materials {
					<option value={ fmt.Sprint(material.ID) }>{ material.Name }</option>
				}
			</select>
		</div>
		
		<div id="hollow-additional" class="hidden">
			<button type="button" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
				Enable Additional Insulation
			</button>
		</div>
		
		<div>
			<label for="desired-u-value" class="block text-sm font-medium text-gray-700">Desired U-Value (W/m²K)</label>
			<input type="number" id="desired-u-value" name="desired-u-value" value="0.02" step="0.01" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" />
		</div>
		
		<button type="submit" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">
			Calculate Optimal Insulation
		</button>
	</form>
	
	<div id="result" class="mt-8">
		<!-- Results will be loaded here via HTMX -->
	</div>
	
	<script>
		document.getElementById('wall-type').addEventListener('change', function() {
			var solidInputs = document.getElementById('solid-inputs');
			var hollowAdditional = document.getElementById('hollow-additional');
			
			if (this.value === 'solid') {
				solidInputs.classList.remove('hidden');
				hollowAdditional.classList.add('hidden');
			} else if (this.value === 'hollow') {
				solidInputs.classList.add('hidden');
				hollowAdditional.classList.remove('hidden');
			} else {
				solidInputs.classList.add('hidden');
				hollowAdditional.classList.add('hidden');
			}
		});
	</script>
}

templ InsulationResult(result models.InsulationResult) {
	<div class="bg-gray-100 p-6 rounded-lg shadow">
		<h2 class="text-xl font-semibold mb-4">Optimal Insulation Configuration</h2>
		<div class="flex space-x-4">
			<div class="w-1/2">
				<h3 class="text-lg font-medium mb-2">Wall Visualization</h3>
				<div class="border border-gray-300 p-4 h-64 relative">
					<!-- Wall visualization goes here -->
				</div>
			</div>
			<div class="w-1/2">
				<h3 class="text-lg font-medium mb-2">Insulation Details</h3>
				<ul class="space-y-2">
					for _, layer := range result.Layers {
						<li class="flex justify-between">
							<span>{ layer.Material.Name }</span>
							<span>{ fmt.Sprintf("%.2f mm", layer.Thickness) }</span>
							<span>{ fmt.Sprintf("U-value: %.4f W/m²K", layer.UValue) }</span>
						</li>
					}
				</ul>
				<p class="mt-4 font-semibold">Total U-value: { fmt.Sprintf("%.4f W/m²K", result.TotalUValue) }</p>
				<p>Total Cost: { fmt.Sprintf("$%.2f", result.TotalCost) }</p>
			</div>
		</div>
	</div>
}